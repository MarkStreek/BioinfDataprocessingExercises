"""
The main file of this project. All the rules will be imported from seperate files.
Goal: 
    Create a de novo assembly from paired end sequences with quality assesments
Author: 
    Mark van de Streek
Date: 
    2024-03-16
Copyright: 
    BFV3 2023-2024

Run pipeline:
snakemake -c 1 --use-conda --conda-frontend conda
"""

configfile: "config/config.yaml",
workdir: config['workdir'],

rule all:
    input:
        expand("results/fastqc/{sample}_1_fastqc.html", sample=config['samples']),
        expand("results/fastqc/{sample}_2_fastqc.html", sample=config['samples']),
        expand("results/trimmomatic/{sample}_1_paired_trimmed.fastq", sample=config['samples']),
        expand("results/trimmomatic/{sample}_2_paired_trimmed.fastq", sample=config['samples']),
        expand("results/trimmomatic/{sample}_1_unpaired_trimmed.fastq", sample=config['samples']),
        expand("results/trimmomatic/{sample}_2unpaired_trimmed.fastq", sample=config['samples'])

rule fastQC:
    input:
        config["samples_directory"] + "{sample}_1.fastq",
        config["samples_directory"] + "{sample}_2.fastq"
    output:
        "results/fastqc/{sample}_1_fastqc.html",
        "results/fastqc/{sample}_1_fastqc.zip",
        "results/fastqc/{sample}_2_fastqc.html",
        "results/fastqc/{sample}_2_fastqc.zip",
    message:
        "Running FastQC on {input}"
    conda:
        "../envs/FASTQC.yaml"
    params:
        threads=config['threads']
    shell:
        "fastqc -t {params.threads} {input} -o results/fastqc/"

rule fastx_toolkit:
    """
    This tool has verbose specified, but runs first all operations, 
    and then prints the output.
    """
    input:
        config["samples_directory"] + "{sample}_1.fastq",
        config["samples_directory"] + "{sample}_2.fastq"
    output:
        "results/fastx/filtered_{sample}_1.fastq",
        "results/fastx/filtered_{sample}_2.fastq"
    message:
        "Running fastx_toolkit on {input}"
    conda:
        "../envs/FASTX_TOOLKIT.yaml"
    shell:
        "fastq_quality_filter -v -q 20 -p 75 -i {input} -o {output}"

# rule trimmomatic:
#     """
#     Rule that runs Trimmomatic on the FASTX toolkit output files
#     """
#     input:
#         "results/fastx/filtered_{sample}.fastq"
#     output:
#         pairded_end_1="results/trimmomatic/{sample}_paired_trimmed_1.fastq",
#         pairded_end_2="results/trimmomatic/{sample}_paired_trimmed_2.fastq",
#         unpaired_end_1="results/trimmomatic/{sample}_unpaired_trimmed_1.fastq",
#         unpaired_end_2="results/trimmomatic/{sample}_unpaired_trimmed_2.fastq"
#     log:
#         "logs/trimmomatic/{sample}.log"
#     message:
#         "Running Trimmomatic on {input}"
#     conda:
#         "../envs/Trimmomatic.yaml"
#     shell:
#         "java -Xmx1G -jar trimmomatic-0.38.jar PE -phred33 -threads 16 -trimlog {log} {input} {output.pairded_end_1} {output.unpaired_end_1} {output.pairded_end_2} {output.unpaired_end_2} "
#         "ILLUMINACLIP:../envs/trimmomatic-0.39/adapters/TruSeq3-PE.fa:2:30:10 SLIDINGWINDOW:5:20 LEADING:5 TRAILING:5 MINLEN:50"
    
    # USE rimmomatic-0.39/adapters/TruSeq3-SE.fa when RUNNING TRIMMOMATIC

rule trimmomatic_pe:
    input:
        r1="results/fastx/filtered_{sample}_1.fastq",
        r2="results/fastx/filtered_{sample}_2.fastq"
    output:
        r1="results/trimmomatic/{sample}_1_paired_trimmed.fastq",
        r2="results/trimmomatic/{sample}_1_paired_trimmed.fastq",
        r1_unpaired="results/trimmomatic/{sample}_1_unpaired_trimmed.fastq",
        r2_unpaired="results/trimmomatic/{sample}_2_unpaired_trimmed.fastq"
    log:
        "logs/trimmomatic/{sample}.log"
    params:
        trimmer=["ILLUMINACLIP:../envs/trimmomatic-0.39/adapters/TruSeq3-PE.fa:2:30:10", "SLIDINGWINDOW:5:20", "LEADING:5", "TRAILING:5", "MINLEN:50"],
        extra="",
        compression_level="-9"
    threads: 16
    resources:
        mem_mb=1024
    wrapper:
        "v3.5.2/bio/trimmomatic/pe"
