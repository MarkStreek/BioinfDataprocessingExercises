"""
The main file of this project. All the rules will be imported from seperate files.
Goal: 
    Create a de novo assembly from paired end sequences with quality assesments
Author: 
    Mark van de Streek
Date: 
    2024-03-16
Copyright: 
    BFV3 2023-2024

Run pipeline:
snakemake -c 1 --use-conda --conda-frontend conda
"""

configfile: "config/config.yaml",
workdir: config['workdir'],

rule all:
    input:
        expand("results/fastqc/{sample}_1_fastqc.html", sample=config['samples']),
        expand("results/fastqc/{sample}_2_fastqc.html", sample=config['samples']),
        expand("results/fastx/filtered_{sample}_1.fastq", sample=config['samples']),
        expand("results/fastx/filtered_{sample}_2.fastq", sample=config['samples']),

        expand("results/sortmerna/{sample}_aligned_1.fastq.gz", sample=config['samples']),
        expand("results/sortmerna/{sample}_aligned_2.fastq",sample=config['samples']),

        # expand("results/trimmomatic/{sample}_1_paired_trimmed.fastq", sample=config['samples']),
        # expand("results/trimmomatic/{sample}_2_paired_trimmed.fastq", sample=config['samples']),
        # expand("results/trimmomatic/{sample}_1_unpaired_trimmed.fastq", sample=config['samples']),
        # expand("results/trimmomatic/{sample}_2_unpaired_trimmed.fastq", sample=config['samples'])

rule fastQC:
    input:
        config["samples_directory"] + "{sample}_1.fastq",
        config["samples_directory"] + "{sample}_2.fastq"
    output:
        "results/fastqc/{sample}_1_fastqc.html",
        "results/fastqc/{sample}_1_fastqc.zip",
        "results/fastqc/{sample}_2_fastqc.html",
        "results/fastqc/{sample}_2_fastqc.zip",
    message:
        "Running FastQC on {input}"
    conda:
        "../envs/FASTQC.yaml"
    params:
        threads=config['threads']
    shell:
        "fastqc -t {params.threads} {input} -o results/fastqc/"

rule fastx_toolkit:
    """
    This tool has verbose specified, but runs first all operations, 
    and then prints the output.
    """
    input:
        s1=config["samples_directory"] + "{sample}_1.fastq",
        s2=config["samples_directory"] + "{sample}_2.fastq"
    output:
        s1="results/fastx/filtered_{sample}_1.fastq",
        s2="results/fastx/filtered_{sample}_2.fastq"
    message:
        "Running fastx_toolkit on {input}"
    conda:
        "../envs/FASTX_TOOLKIT.yaml"
    shell:
        """
        fastq_quality_filter -v -q 20 -p 75 -i {input.s1} -o {output.s1}
        fastq_quality_filter -v -q 20 -p 75 -i {input.s2} -o {output.s2}
        """

rule trimmomatic_pe:
    input:
        r1="results/fastx/filtered_{sample}_1.fastq",
        r2="results/fastx/filtered_{sample}_2.fastq"
    output:
        r1="results/trimmomatic/{sample}_1_paired_trimmed.fastq",
        r2="results/trimmomatic/{sample}_2_paired_trimmed.fastq",
        r1_unpaired="results/trimmomatic/{sample}_1_unpaired_trimmed.fastq",
        r2_unpaired="results/trimmomatic/{sample}_2_unpaired_trimmed.fastq"
    log:
        "logs/trimmomatic/{sample}.log"
    params:
        trimmer=["ILLUMINACLIP:../envs/trimmomatic-0.39/adapters/TruSeq3-PE.fa:2:30:10", "SLIDINGWINDOW:5:20", "LEADING:5", "TRAILING:5", "MINLEN:50"],
        extra="",
        compression_level="-9"
    threads: 16
    resources:
        mem_mb=1024
    wrapper:
        "v3.5.2/bio/trimmomatic/pe"

rule sortmerna_pe:
    input:
        ref=["silva-bac-16s-id90.fasta", "silva-bac-23s-id98.fasta",
             "silva-arc-16s-id95.fasta", "silva-arc-23s-id98.fasta",
             "silva-euk-18s-id95.fasta", "silva-euk-28s-id98.fasta",
             "rfam-5s-database-id98.fasta", "rfam-5.8s-database-id98.fasta"],
        reads=["results/trimmomatic/{sample}_1_paired_trimmed.fastq", "results/trimmomatic/{sample}_2_paired_trimmed.fastq"],
    output:
        aligned=["results/sortmerna/{sample}_aligned_1.fastq.gz",
                 "results/sortmerna/{sample}_aligned_2.fastq"],
        other=["results/sortmerna/{sample}_unpaired_1.fastq.gz",
               "results/sortmerna/{sample}_unpaired_2.fastq"],
        stats="logs/sortmerna/sortmerna_{sample}_stats.log",
    params:
        extra="--idx-dir idx --paired_in --out2",
    threads: 16
    resources:
        mem_mb=3072,  # amount of memory for building the index
    log:
        "logs/sortmerna/reads_pe.log",
    wrapper:
        "v3.5.3/bio/sortmerna"