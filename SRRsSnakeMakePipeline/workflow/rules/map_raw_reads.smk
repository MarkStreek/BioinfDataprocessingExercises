"""
This file contains two rules: bowtie2_build and bowtie2. 
bowtie2_build builds a bowtie2 index from the Trinity assembly.
bowtie2 aligns the raw reads to the Trinity assembly.

AUTHOR: Mark van de Streek
DATE: 2024-04-05
"""


rule bowtie2_build:
    """
    Rule that builds the index of the trinity assembly.
    The multiext function is used to generate the multiple output files, 
    that just differ by their extension.
    --------------------------------------------------------------------
    Input:
            - ref: The Trinity assembly file.
    Output:
            - The multiple index files that are generated by bowtie2-build.
    --------------------------------------------------------------------

    """
    input:
        ref="results/trinity/trinity_{accession}.Trinity.fasta",
    output:
        multiext(
            "results/bowtie2_build/{accession}_genome",
            ".1.bt2",
            ".2.bt2",
            ".3.bt2",
            ".4.bt2",
            ".rev.1.bt2",
            ".rev.2.bt2",
        ),
    log:
        "logs/bowtie2/{accession}.log"
    message:
        "Building bowtie2 index for {input.ref}"
    params:
        extra="",
    threads:
        config['threads']
    wrapper:
        "v3.7.0/bio/bowtie2/build"

rule bowtie2:
    """
    Rule that aligns the raw reads to the Trinity assembly.
    The multiext function is used again to generate multiple output files.
    The output of this rule is a binary alignment map that is converted 
    to a sam in another rule
    ----------------------------------------------------------------------
    Input:
            - sample: The raw reads (left/right).
            - idx: The index files generated by bowtie2_build.
    Output:
            - The binary alignment map file.
    ----------------------------------------------------------------------
    """
    input:
        sample=[
            config["samples_directory"] + "{accession}_1.fastq",
            config["samples_directory"] + "{accession}_2.fastq"
            ],
        idx=multiext(
            "results/bowtie2_build/{accession}_genome",
            ".1.bt2",
            ".2.bt2",
            ".3.bt2",
            ".4.bt2",
            ".rev.1.bt2",
            ".rev.2.bt2",
        ),
    output:
        "results/mapped/{accession}.bam"
    log:
        "logs/bowtie2/{accession}.log"
    message:
        "Aligning {input.sample} to {input.idx}"
    params:
        extra="--local",
    threads:
        config['threads']
    wrapper:
        "v3.7.0/bio/bowtie2/align"

rule bam_to_sam:
    """
    Rule that converts the binary alignment map to a sam file.
    The sam file is the same as the binary alignment map, but is readable.
    The sam file is used to create the final vizualisation.
    ----------------------------------------------------------------------
    Input:
            - The binary alignment map file.
    Output:
            - The sequence alignment map file.
    ----------------------------------------------------------------------
    """
    input:
        "results/mapped/{accession}.bam"
    output:
        "results/mapped/{accession}.sam"
    log:
        "logs/samtools/{accession}.log"
    message:
        "Converting {input} to {output}"
    conda:
        "../../envs/ConvertBAM_SAM.yaml"
    threads:
        config['threads']
    shell:
        "samtools view -h {input} > {output} 2> {log} --threads {threads}"

